1. 리터럴 연산자
- 리터럴(Literal : 문자그대로의)
    - int x = 2;
        - x는 변수
        - 2는 리터럴
    - "My name"
        - 이런 문자열도 리터럴

- 연산자
    - a + b
        - a, b는 피연산자
        - +는 연산자
    - 단항 : 피연산자 1개
    - 이항 : 피연산자 2개
    - 삼항 : 피연산자 3개
        - (조건문) : 참 or 거짓

=========================================================================

2. 기본적인 서식 맞추기
- 컴퓨터는 빈칸을 무시한다.

=========================================================================

3. 선언과 정의의 분리
- 컴퓨터는 순서대로 앞부터 읽어서름
    - main안에서 쓰이는 함수의 정의가 main 뒤에 있으면
        - 컴퓨터 입장에선 모른다.
        ex) int main()
            {
                f();    // 정의가 뒤에 있어서 main 입장에선 이 함수가 어떤 함수인지 모름
            }

            void f()
            {
                std::cout << "love" << std::endl;
            }
        
        - 따라서 함수의 프로토 타입을 앞에 적고 정의를 뒤에 적어주자!
        ex) void f();
            int main()
            {
                f(); // 정의는 뒤에있더라도 이제 무슨 함수인지 앞에서 알게 됨
            }
            void f()
            {
                std::cout << "love" << std::endl;
            }